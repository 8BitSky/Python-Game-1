import pygame, sys
from random import randint, uniform

#Game Setup
pygame.init()
pygame.display.set_caption('Asteroid Clone - OOP')
SCREEN_W, SCREEN_H = 960, 720 
display_surface = pygame.display.set_mode((SCREEN_W, SCREEN_H))
clock = pygame.time.Clock()

#Background
background_surface = pygame.image.load("./sprites/background.png").convert()
#Shaceship
ship = pygame.image.load("./sprites/player.png").convert_alpha()
ship_rect = ship.get_rect(midtop = pygame.mouse.get_pos())
#ship_rect.inflate_ip(-20,1)
#Laser
laser = pygame.image.load("./sprites/laser.png").convert_alpha()
laser_rect = laser.get_rect(midbottom = ship_rect.midtop)
laser_list = []
#Asteroid
asteroid = pygame.image.load("./sprites/asteroid.png").convert_alpha()
asteroid_list = []
#Sound Files
laser_sound = pygame.mixer.Sound("./audio/laser_sound.mp3")
explode_sound = pygame.mixer.Sound("./audio/explode.mp3")
background_sound = pygame.mixer.Sound("./audio/background_sound.mp3")
background_sound.play(loops = -1)
#Text Files
large_font = pygame.font.SysFont("comicsans", 30)

#Laser Variables
cooldown_interval = 500
shoot_time = 0

#Laser Functions
def laser_cooldown(shoot_time):
   current_time = pygame.time.get_ticks()
   if (current_time - shoot_time) < cooldown_interval:
      return True
   else:
      return False
            
def laser_shoot():
   global shoot_time
   if not (laser_cooldown(shoot_time)):
       shoot_time = pygame.time.get_ticks()
       laser_rect = laser.get_rect(midbottom = ship_rect.midtop)
       laser_list.append(laser_rect)
       laser_sound.play()
       
def laser_update(laser_list):
    for rect in laser_list:
        rect.y -= 10
        if rect.bottom < 0:
            laser_list.remove(rect)
            
#Asteroid Functions
def asteroid_update(asteroid_list, speed=1):
    for asteroid_tuple in asteroid_list:
        asteroid_rect = asteroid_tuple[0]
        direction = asteroid_tuple[1]
        asteroid_rect.center += direction*speed
        if asteroid_rect.top > SCREEN_H:
            asteroid_list.remove(asteroid_tuple)
            
def updateFile():
   f = open("scores.txt","r")
   file = f.readlines()
   last= int(file[0])
   
   if last < int(current_score):
       f.close()
       file = open("scores.txt","w")
       file.write(str(current_score))
       file.close()
       return current_score
    
   return last

#def MousePosition():
#  print(pygame.mouse.get_pos())
current_score = 0
high_score = 0
asteroid_spawn_rate = 500
asteroid_timer = pygame.event.custom_type()
pygame.time.set_timer(asteroid_timer, asteroid_spawn_rate)
pygame.mouse.set_visible(False)

#Main Game Loop
while True:
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      pygame.quit()
      sys.exit()
    if event.type == pygame.MOUSEBUTTONDOWN:
        if event.button == 1:
           laser_shoot()

            
    if event.type == asteroid_timer:
        pos_x = randint(-100,SCREEN_W+100)
        pos_y = randint(-100,-50)
        spawn_point = (pos_x, pos_y)
        asteroid_rect = asteroid.get_rect(center= spawn_point)
        spawn_direction = pygame.math.Vector2(uniform(-1,1),uniform(0.2,1.0))
        asteroid_list.append((asteroid_rect,spawn_direction))
        
  clock.tick(60)
  #print(len(asteroid_list))
  #Player Movement
  ship_rect.midtop = pygame.mouse.get_pos()

  #Object Movement
  laser_update(laser_list)
  asteroid_update(asteroid_list,randint(1,8))
  
  #Collisions
  #Ship
  for asteroid_tuple in asteroid_list:
      asteroid_rect = asteroid_tuple[0]
      if ship_rect.colliderect(asteroid_rect):
          explode_sound.play()
          pygame.quit()
          sys.exit()
  #Lasers
  for asteroid_tuple in asteroid_list:
      for laser_rect in laser_list:
          if asteroid_tuple[0].colliderect(laser_rect):
              asteroid_list.remove(asteroid_tuple)
              current_score = current_score + 1
              explode_sound.play()
              laser_list.remove(laser_rect)
  
  #Background
  display_surface.fill((0,0,0))
  display_surface.blit(background_surface,(0,0))
  #Debug Ship Collider
  #pygame.draw.rect(display_surface,"red",ship_rect,width=1)
  display_surface.blit(ship,ship_rect)
  
  #display_surface.blit(laser,laser_rect)
  for rect in laser_list:
      display_surface.blit(laser,rect)
  for asteroid_tuple in asteroid_list:
      display_surface.blit(asteroid, asteroid_tuple[0])
  score_text = large_font.render("Score: " + str(current_score),1,(255,255,255))
  high_score_text = large_font.render("High Score: " + str(updateFile()),1,(255,255,255))
  display_surface.blit(high_score_text, (SCREEN_W/2 - high_score_text.get_width()/2,50))
  display_surface.blit(score_text, (SCREEN_W/2 - score_text.get_width()/2,SCREEN_H - 50))
  pygame.display.update()

